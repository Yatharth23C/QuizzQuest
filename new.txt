ABSTRACT

This project presents the development of a gamified quiz application designed to enhance learning through interactive games. Built using Next.js, the app leverages its powerful server-side rendering and built-in API routing capabilities to create a smooth and scalable user experience. The application supports two user roles: students, who answer questions by playing educational games, and teachers, who can create and manage quiz content. 
Authentication is managed using NextAuth, ensuring secure and role-based access. The application’s data, including user profiles, quiz questions, and scores, is stored in a cloud-based MongoDB Atlas database, allowing for efficient data management and scalability. 
A key innovation of the project lies in integrating Canvas to design interactive games, transforming the quiz solving process. In one such game, users must select the correct answer from options that dynamically appear and move across the screen, creating an engaging, time-based challenge. A real-time dashboard tracks users' performance and scores, providing insights into student progress. 
The use of Tailwind CSS ensures responsive, modern UI design, making the app visually appealing and user friendly. The project's ultimate goal is to enhance the educational experience by combining quizzes with game mechanics to improve retention, engagement, and user satisfaction. 
























CHAPTER 1: INTRODUCTION

: Introduction
In today's educational landscape, there is a growing interest in combining technology with traditional learning to enhance student engagement and improve learning outcomes. One of the most effective techniques to achieve this is through the use of game-based learning and quizzes, both of which encourage active participation, motivation, and a more enjoyable learning experience. Our project, a gamified quiz application, aims to leverage these benefits by offering an innovative platform where students can solve quiz questions not through conventional answer submission, but by interacting with fun and engaging games. 
This project, built using Next.js, introduces a novel approach to learning by integrating the familiar quiz format with gameplay mechanics. The app allows two types of users: students and teachers. Students can log in, choose from a set of quizzes categorized by subject, and solve questions via games. For instance, the current version of the game involves a scenario where answer options appear on the screen, move at varying speeds, and the student must click on the correct answer within a limited time. If the answer is correct, they are awarded points. This interactive approach keeps students motivated, engaged, and promotes better retention of information. 
Teachers, on the other hand, have their own role within the platform. After logging in, they can create quizzes, input their own questions, and save them for students to use. This allows educators to customize content based on their curriculum or the specific needs of their students. Teachers can also view student performance through a dedicated dashboard, making it easier to monitor progress and identify areas where students may need further support. 
One of the key reasons for choosing Next.js for this project is its flexibility and performance. 
With its built-in App Router, the framework simplifies routing and allows for Server-Side Rendering (SSR), making it possible to easily create and serve APIs. SSR enhances the performance of the app, ensuring that both students and teachers have a smooth experience, especially when retrieving or submitting data. Additionally, Next.js comes with out-of-the-box support for Tailwind CSS, which allows for rapid front-end development and the creation of a responsive, visually appealing interface. 
For data storage and management, we opted for MongoDB Atlas, a cloud-based NoSQL database that provides a scalable solution to handle user data, quiz content, and game scores. The use of NextAuth for authentication ensures secure login for both students and teachers, allowing for personalized and role-based access to different features of the application. 
An important aspect of this project is the integration of HTML Canvas for the game-based quiz solving feature. Canvas allows for real-time rendering of interactive elements, such as moving answer options, which enhances user engagement by adding a gaming element to the otherwise static quiz-solving process. This approach not only tests the user’s knowledge but also their reflexes and decision-making skills under time constraints, making learning both dynamic and fun. 
The platform also includes a Dashboard that tracks and displays student scores. This feature enables both students and teachers to monitor progress and performance over time. Teachers can use this data to provide feedback or adjust future quizzes to better suit the needs of their students. 
The ultimate goal of this project is to provide an engaging, educational tool that helps students learn in a more interactive and enjoyable way, while also giving teachers a platform to create, monitor, and customize quizzes. As educational technology continues to evolve, this project represents a step forward in leveraging gamification to improve learning outcomes in an increasingly digital world. 

1.2: Purpose of Project

The primary goal of this project is to create an interactive and engaging learning platform that enhances traditional quiz-based assessments through the use of game mechanics. The platform aims to address several key challenges in education, including learner engagement, retention of information, and the need for dynamic teaching tools that adapt to different learning styles. 
 
Engagement Through Gamification: 
One of the major issues in modern education is the difficulty of maintaining student attention, especially in self-paced, online learning environments. Standard quiz applications often fail to provide the kind of dynamic interaction that motivates learners to actively participate. By integrating games into the quizsolving process, our project provides a more stimulating and enjoyable experience for students, thereby increasing their motivation to engage with the material. Games offer immediate feedback, challenges, and rewards, all of which contribute to a more immersive learning experience that goes beyond simple multiplechoice questions. 
 
Learning by Doing: 
The use of games in the quiz application transforms the typically passive activity of answering questions into an active process. Students are not merely choosing answers from a list, but are interacting with the game mechanics to solve questions. This 'learning by doing' approach encourages critical thinking, problemsolving, and quicker recall of information. Moreover, by presenting quiz questions in a game-like format, students are more likely to retain the information they are learning because it is associated with a more memorable, active experience. 
 
Adaptability for Teachers and Students: 
The project is designed to cater to two distinct user roles—teachers and students. Teachers are provided with tools to create customized quizzes, allowing them to tailor the difficulty, content, and learning objectives to their students' needs. This flexibility enables teachers to align the quizzes with specific curricula or focus areas, enhancing the learning outcomes for students. Meanwhile, students can choose quizzes based on their skill level or areas of interest, and engage in an interactive learning process that adapts to their progress through real-time feedback and game-based challenges. 
 
Data-Driven Insights: 
Another important purpose of this project is to provide both teachers and students with meaningful insights into their performance. The dashboard feature tracks user scores and progress over time, offering valuable feedback for both parties. Teachers can use this data to adjust their teaching strategies, identify students who may need additional help, and measure the effectiveness of the quizzes they create. Students, on the other hand, can see their progress in real time, track improvements, and gain confidence in their learning journey. 
 
Encouraging a Collaborative Learning Environment: 
In addition to the individual benefits for both students and teachers, the project also aims to foster a collaborative learning environment. By allowing teachers to create quizzes and share them with students, the platform encourages interaction and dialogue between both groups. Teachers can design quizzes that focus on problem-solving and critical thinking, while students can provide feedback on quiz difficulty, game design, and learning outcomes. This collaborative approach can ultimately create a more adaptive and personalized learning experience for all users. 
In summary, the purpose of this project is to innovate the traditional quiz format by incorporating gamified learning experiences that are fun, interactive, and more conducive to deeper learning. The platform is designed to increase engagement, improve retention, and offer a flexible system for both teachers and students, while leveraging real-time data to enhance the overall educational experience. 





1.3: Introduction to Kaboom Js 

Kboom.js is a lightweight JavaScript library designed for creating dynamic explosion and particle effects in web applications. It provides an easy-to-use API that allows developers to implement visually appealing explosions, sparks, and other physics-based animations with minimal effort.
Originally built for game development and interactive web elements, Kboom.js enables real-time particle simulation without requiring complex graphics programming. The library leverages HTML5 Canvas and JavaScript to render high-performance animations that can be customized in terms of speed, color, particle size, and behavior.
Kboom.js is particularly useful for adding interactive effects in browser-based games, UI transitions, and event-driven animations, enhancing the overall user experience. Due to its lightweight nature and dependency-free design, it integrates seamlessly into modern JavaScript projects.


















CHAPTER 2: Literature Survey

2.1 Literature Survey on online quiz websites

https://www.researchgate.net/publication/336115534_A_Project_on_Online_MCQ_Quiz_Application
This project emphasizes user authentication for both teachers and students, enhancing security by controlling test access based on user roles. Teachers can add and modify quizzes, while students can take quizzes with immediate scoring and feedback, supporting effective test management. This application aims to minimize runtime errors and streamline quiz administration with database integration for managing data efficiently​
https://www.ijarnd.com/manuscripts/v4i5/V4I5-1142.pdf
The IJARnD study discusses user-friendly design principles for online quiz systems, noting how simplicity and ease of navigation can significantly improve the learning experience. It covers essential features like real-time score tracking and responsive design, which are important for diverse device compatibility. This paper underscores the importance of usability to encourage frequent user engagement and effective learning ARSCT: Features of Coding Quiz Applications.
In this paper, the focus is on quiz applications specifically designed for coding and programming skills. It highlights the need for a dynamic backend to support code testing environments and real-time feedback on code submissions. The study also suggests improvements in performance evaluation metrics and analytics to help users track their progress over time .
Other links:
https://ijarsct.co.in/Paper7578.pdf

https://ieeexplore.ieee.org/document/5314125

https://www.ijraset.com/research-paper/coding-quiz-application
https://berks.psu.edu/sites/berks/files/campus/Hillman_TLI_report.pdf




2.2 Problem Statement 


A lot of students find traditional methods of learning boring and repetitive, thus we made an app to counter just that.




2.3 Objectives


To add more content to the website and AI assistants for students and teachers.


2.4 Scope of Project


Being an online website project the visual and performance of the games are very limited as intensive visuals can make the games harder to run on low end devices or weaker browser limiting the number of students that can use the website.
































CHAPTER 3: System Description

3.1 Block Diagram 







3.2 Details of methodology and concepts used

1. Setting Up the Development Environment 

We initialized a new Next.js project using npx create-next-app. This command scaffolds a project with a ready-to-use structure.

Tailwind CSS Setup: Since Next.js has built-in support for Tailwind CSS, we integrated Tailwind for styling by installing it and configuring the tailwind.config.js file. This provided us with utility-first CSS classes to create a responsive and attractive UI.
MongoDB Atlas Setup: We used MongoDB Atlas as our database for storing user data, quiz questions, and scores. MongoDB Atlas, a cloud-based NoSQL database, was chosen for its scalability and ease of integration with Next.js.
2. Authentication with NextAuth.js
The application requires user login, and for this, we implemented NextAuth.js for secure authentication. NextAuth supports multiple authentication providers (e.g., Google), ensuring flexibility.
Here's how it was implemented:
Installation and Setup: We installed next-auth and configured it by creating an API route (app/api/auth/[...nextauth]/options.js). This file defines authentication options, including which providers (e.g., Google, GitHub) to use.

Session Management: The /teachers path was protected by making the user login in order to select a student or teacher role.


Role Selection: After a user logs in, they are prompted to choose a role: student or teacher. The role determines the functionality available to the user in the app (e.g., students take quizzes, while teachers create quizzes).
3. Database Management with MongoDB Atlas :
We used MongoDB Atlas to store data for both students and teachers. The data schema is as follows:

User Schema: Stores user information, including authentication details, role (student or teacher), and scores.
Quiz Schema: Stores quiz questions, topics, and related information, such as the correct answer, the teacher who created it, and the category (e.g., math, science). To connect Next.js to MongoDB, we installed the MongoDB client and used mongoose for schema definition and data modeling. This allowed us to define the structure of the quizzes, users, and results stored in the database.
4. Quiz Creation for Teachers
Teachers have access to a dedicated interface where they can create and manage quiz questions. The process involves:
Quiz Form: We created a form using React, allowing teachers to input the question, options, correct answer, and select the quiz category (e.g., math, science).


API Route for Saving Quiz Data: We created an API route (app/api/auth/questions.js) to handle the submission of quiz data to the database. The form sends a POST request to this API endpoint, where the data is validated and then stored in MongoDB.
Dashboard for Quiz Management: Teachers can view and manage their quizzes through a dashboard, where they can edit or delete questions as needed.


5. Quiz Solving for Students (Game-Based Learning)
Students are presented with a fun and interactive way to solve quizzes. The main game mechanics were implemented using HTML Canvas:
Canvas Setup: We used the HTML Canvas API to create a dynamic game environment where answer options are presented on the screen and slowly fall or move. The student must click on the correct answer before it disappears or moves out of reach.
Game Logic: The game involves timing and mouse click events. When a user clicks on an option, the app verifies if it's the correct answer. If correct, the user earns points, and if incorrect, no points are awarded. The speed of the game and number of options can be adjusted based on difficulty levels.


Points and Feedback: After each game (quiz attempt), their scores are recorded in the database for tracking. This is handled via API requests that update the student's score in MongoDB.
6. Dashboard for Tracking Scores
Both students and teachers have access to dashboards, which are key to tracking performance and monitoring progress.
Student Dashboard: Displays the student’s quiz scores, topics covered, and performance trends. The dashboard is updated dynamically using data fetched from the MongoDB database.
Teacher Dashboard: Teachers can track the performance of their students by viewing individual scores and overall class statistics, allowing them to adjust future quizzes accordingly.
7. API Routes for Quiz Data and User Scores
Next.js allows the creation of API routes that function as backend endpoints. We used these API routes to:
Retrieve Quizzes: When students select a quiz, an API route fetches the corresponding questions from MongoDB.
Submit Quiz Results: After completing a game, the student's score is sent via a POST request to an API route, updating the student's record in the database.
Get question suggestions from AI: When creating questions teachers will receive suggestions of similar questions.
For example, we created an API route pages/api/quiz/[id].js that retrieves quiz data based on a quiz ID. This route returns the quiz details to the frontend, allowing the student to attempt the quiz.
8. Frontend Implementation
The frontend was designed using React and Tailwind CSS to ensure responsiveness and a clean user interface. Key components include:
Login/Signup Pages: Built using NextAuth.js for authentication.
Role Selection Page: Allows users to select their role (student or teacher) after login.
Quiz and Game Interface: Kaboom.js game for students to solve quizzes interactively.
AI Chat bot : A separate page for students to clear doubts regarding the quizzes. 






























CHAPTER 4: Hardware And Software Components



Hardware Requirements
Laptop with at least:
Processor: Intel Core i5 or equivalent (i7 recommended)
RAM: 8 GB (16 GB recommended)
Storage: 500 GB SSD or higher
OS: Windows, macOS, or Linux


Software Requirement
Development Tools
VS Code – Code editor
Node.js (Latest LTS) – JavaScript runtime
npm – Package manager
Next.js – Full-stack framework
Tailwind CSS – Styling
Kaboom.js – Game development library
Database & Authentication
MongoDB Atlas – Cloud database
NextAuth.js – Authentication

Version Control & Hosting
Git & GitHub – Version control
Vercel – Deployment platform 
Testing & Debugging
Google Chrome & Firefox – Browser testing

